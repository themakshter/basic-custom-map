{"version":3,"sources":["webpack://basicCustomMap/webpack/universalModuleDefinition","webpack://basicCustomMap/webpack/bootstrap","webpack://basicCustomMap/./src/rectangle-dimensions.ts","webpack://basicCustomMap/./node_modules/snapsvg/dist/snap.svg.js","webpack://basicCustomMap/./src/image-svg-component.ts","webpack://basicCustomMap/./src/text-svg-component.ts","webpack://basicCustomMap/./src/map-pin-card-svg-component.ts","webpack://basicCustomMap/./src/circle-dimensions.ts","webpack://basicCustomMap/./src/circle-svg-component.ts","webpack://basicCustomMap/./src/map-pin-svg-component.ts","webpack://basicCustomMap/./src/map-svg-component.ts","webpack://basicCustomMap/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","default","[object Object]","width","height","this","__WEBPACK_AMD_DEFINE_RESULT__","current_event","stop","has","separator","comaseparator","numsort","events","firstDefined","lastDefined","objtos","Str","isArray","glob","a","b","ii","length","toString","String","Array","ar","eve","scope","oldstop","args","slice","arguments","listeners","z","indexed","queue","out","ce","push","zIndex","sort","apply","_events","item","items","k","j","jj","nes","names","split","e","es","concat","f","sep","replace","RegExp","on","exist","event","attrs","nt","subname","cur","join","test","nts","off","unbind","key","splice","inodes","unshift","funcs","prune","once","f2","version","__WEBPACK_LOCAL_MODULE_0__","undefined","mina","requestID","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","Date","getTime","idgen","idprefix","timer","now","sta","val","ds","dur","B","speed","spd","duration","stopit","id","update","pause","pdif","resume","frame","res","start","end","easing","set","timeStamp","len","A","anim","linear","status","time","getById","easeout","Math","pow","easein","easeinout","q","Q","sqrt","x","X","abs","y","Y","t","backin","backout","elastic","sin","PI","bounce","Snap","w","h","nodeType","wrap","is","Element","doc","querySelector","Paper","_","win","document","tokenRegex","objNotationRegex","toFloat","parseFloat","toInt","parseInt","math","mmax","max","mmin","min","E","round","objectToString","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","ID","el","type","xlink","xmlns","hub","$","attr","createTextNode","text","createComment","substring","getAttributeNS","getAttribute","nodeValue","setAttributeNS","setAttribute","removeAttribute","createElementNS","toLowerCase","isFinite","cacher","postprocessor","newf","arg","cache","count","array","repush","shift","rad","deg","url","format","str","obj","all","quote","quotedName","isFunc","replacer","clone","constructor","angle","tan","cos","asin","num","acos","atan","atan2","x1","y1","x2","y2","x3","y3","len2","closestPoint","path","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","node","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","indexOf","g","hex","error","rgbtoString","charAt","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","getElementsByTagName","style","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","V","L","M","parsePathString","pathString","pth","arr","paramCounts","u","data","params","parseTransformString","TString","getSomeSVG","ownerSVGElement","select","add2group","list","forEach","appendChild","children","childNodes","snap","svg","paper","tagName","nodeName","anims","transform","add","mask","pattern","symbol","method","Fragment","frag","make","parent","desc","defs","proto","ownerDocument","body","dom","contentDocument","svgTransform2string","tstr","rgTransform","transform2matrix","bbox","tdata","Matrix","bb","tlen","command","absolute","inver","invert","translate","rotate","scale","_unit2px","mgr","getW","getBBox","getH","nam","class","fill","removeChild","contains","compareDocumentPosition","getSomeDefs","parentNode","pdefs","query","selectAll","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","div","createElement","innerHTML","firstChild","fragment","ch","toJSON","jsonFiller","css","lastIndexOf","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","pd","encodeURIComponent","open","setRequestHeader","onreadystatechange","readyState","send","load","responseText","getElementByPoint","canvas","elem","box","docElem","clientTop","clientLeft","top","left","target","elementFromPoint","opera","so","getBoundingClientRect","documentElement","pageYOffset","scrollTop","pageXOffset","scrollLeft","sr","createSVGRect","hits","getIntersectionList","plugin","elproto","unit2px","isWithoutTransform","getClientRects","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","matrix","map","propString","extractTransform","doReturn","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","it","appendTo","prepend","first","insertBefore","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","cloneNode","els","ids","uses","urltest","linktest","oldid","old","fs","fixids","toDefs","toPattern","patternUnits","viewBox","refX","refY","cx","cy","markerWidth","markerHeight","orient","eldata","chld","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","from","to","Animation","animation","inAnim","_attrs","_callback","curStatus","animate","setter","eq","fkeys","tkeys","keys","equal","matrixproto","norm","normalize","mag","aNew","bNew","multLeft","cNew","eNew","me","skewX","skew","skewY","fromCharCode","offset","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","clipIt","reURLValue","URL","fillStroke","grad","gradient","deurl","gradrg","setFontSize","fontSize","getFontSize","tokens","stops","seed","step","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","textExtract","chi","textContent","internal","rgNotSpace","addClass","clazz","finalValue","classes","curClasses","removeClass","pos","hasClass","toggleClass","flag","operators","+","-","/","*","reUnit","reAddon","getNumber","plus","evnt","atr","unit","aUnit","op","isNaN","bplus","getUnit","rect","circle","preload","onerror","src","img","cssText","onload","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","inserted","GgetBBox","GsetStops","addStop","gradientLinear","setStops","gradientRadial","fx","fy","gradientUnits","clear","next","p2s","paths","ps","sleep","r1","r2","r0","rectPath","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","x4","y4","ll","t2","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","point","sp","subpaths","path2curve","getSubpathsAtLength","t1","t13","t12","t3","mx","my","nx","ny","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","interPathHelper","path1","path2","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","pathBBox","dim","xmin","ymin","ellipsePath","getPath","pathToAbsolute","pa0","pa","crz","dots","pop","catmullRom2bezier","l2c","q2c","ax","ay","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","crp","iLen","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","lowerCase","rel","toCubic","pathi","Set","bindings","setproto","thisArg","each","begin","handler","cb","callbacker","bind","aname","unbound","index","insertion","tail","todel","arglen","exclude","getEmpty","getViewBox","getColour","Function","path2array","isNumeric","Number","tt1","tt2","maxlength","equaliseTransform","arr1","arr2","bUnit","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","origTransform","init","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align","saveColor","colors","A100","A200","A400","A700","mui","flat","pink","purple","deeppurple","indigo","lightblue","cyan","teal","lightgreen","lime","yellow","amber","orange","deeporange","brown","grey","bluegrey","turquoise","greensea","sunflower","emerland","nephritis","carrot","pumpkin","peterriver","belizehole","alizarin","pomegranate","amethyst","wisteria","clouds","silver","wetasphalt","midnightblue","concrete","asbestos","importMUIColors","imageSource","snapCtx","position","dimensions","Promise","resolve","reject","details","container","strokeWidth","foreignObject","title","description","parsedSvg","groupedElement","hide","radius","image_svg_component_1","rectangle_dimensions_1","circle_svg_component_1","circle_dimensions_1","map_pin_card_svg_component_1","clickCallback","pinImage","circleSize","circlePosition","circleForPin","mapPinDetails","mapPinCardDimensions","nameCard","draw","then","hoverInHandler","show","hoverOutHandler","click","map_pin_svg_component_1","text_svg_component_1","pins","mapImage","titleFontSize","titlePosition","mapTitle","pin","pinSize","pinDimensions","callbackFunction","map_svg_component_1","createMap","svgId","svgElement","mapWidth","valueInSpecifiedUnits","mapHeight","mapDimensions","console","log"],"mappings":"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","file":"basic-custom-map.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"basicCustomMap\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"basicCustomMap\"] = factory();\n\telse\n\t\troot[\"basicCustomMap\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","import Dimensions from \"./dimensions\";\r\n\r\nexport default class RectangleDimensions implements Dimensions {\r\n  constructor(public width: number, public height: number){}\r\n  getDimensions(): any  {\r\n    return {\r\n      width: this.width,\r\n      height: this.height\r\n    }\r\n  }\r\n}\r\n","/*** IMPORTS FROM imports-loader ***/\n(function() {\nvar fix = module.exports=0;\n\n// Snap.svg 0.5.0\n//\n// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// build: 2017-02-06\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.0\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        };\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != \"undefined\") {\n        // Next for Node.js or CommonJS\n        var eve = require(\"eve\");\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            // try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            // } catch (e) {\n                // return null;\n            // }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan;\n            bestLength = scanLength;\n            bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after;\n            bestLength = afterLength;\n            bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + +r, y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nreturn Snap;\n}));\n}.call(window));","import SvgComponent from \"./svg-component\";\r\nimport Position from \"./position\";\r\nimport RectangleDimensions from \"./rectangle-dimensions\";\r\n\r\nexport default class ImageSvgComponent implements SvgComponent{\r\n\r\n  constructor(private imageSource: string, public snapCtx: Snap.Paper, public position: Position, public dimensions: RectangleDimensions){}\r\n\r\n  draw() : Promise<void> {\r\n    return new Promise<void>( (resolve: any, reject: any) => {\r\n      this.snapCtx.image(this.imageSource, this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n","import SvgComponent from \"./svg-component\";\r\nimport Position from \"./position\";\r\nimport Dimensions from \"./dimensions\";\r\n\r\nexport default class TextSvgComponent implements SvgComponent{\r\n\r\n  constructor(private text: string, public snapCtx: Snap.Paper, public position: Position, public dimensions: Dimensions, public fontSize: number = 10){}\r\n\r\n  draw() : Promise<void> {\r\n    return new Promise<void>( (resolve: ()=> any, reject: ()=> any) => {\r\n      //this.snapCtx.font = this.fontSize + 'px serif';\r\n      this.snapCtx.text(this.position.x, this.position.y, this.text);\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n","import Snap = require(\"snapsvg\");\r\nimport SvgComponent from \"./svg-component\";\r\nimport Position from \"./position\";\r\nimport RectangleDimensions from \"./rectangle-dimensions\";\r\nimport MapPinDetails from \"./map-pin-details\";\r\n\r\nexport default class MapPinCardSvgComponent implements SvgComponent {\r\n\r\n  constructor(private details: MapPinDetails, public snapCtx: Snap.Paper, public position: Position, public dimensions: RectangleDimensions){}\r\n  groupedElement!: Snap.Paper\r\n  draw() {\r\n    return new Promise<void>( (resolve: ()=> any, reject: ()=> any) => {\r\n      let container = this.snapCtx.rect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height, 10);\r\n      container.attr({\r\n        fill: 'white',\r\n        stroke: 'black',\r\n        strokeWidth: 1\r\n      });\r\n      let cardWidth: number = this.dimensions.width * 0.95;\r\n      let cardHeight: number = this.dimensions.height * 0.95;\r\n      let foreignObject: string = ` <svg>\r\n                                      <foreignObject width=\"${cardWidth}\" height=\"${cardHeight}\" x=\"${this.position.x}\" y=\"${this.position.y}\">\r\n                                        <p>\r\n                                          <b>${this.details.title}</b>\r\n                                          <br/>\r\n                                          ${this.details.description}\r\n                                        </p>\r\n                                      </foreignObject>\r\n                                    </svg>`;\r\n      let parsedSvg = Snap.parse( foreignObject);\r\n      this.groupedElement = this.snapCtx.group( container, parsedSvg);\r\n      this.hide();\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  hide(): void {\r\n    this.groupedElement.attr({\r\n      \"visibility\": \"hidden\"\r\n    });\r\n  }\r\n\r\n  show(): void {\r\n    this.groupedElement.attr({\r\n      \"visibility\": \"visible\"\r\n    });\r\n  }\r\n\r\n}\r\n","import Dimensions from \"./dimensions\";\r\n\r\nexport default class CircleDimensions implements Dimensions {\r\n  constructor(public radius: number){}\r\n  getDimensions(): any  {\r\n    return {\r\n      radius: this.radius\r\n    }\r\n  }\r\n}\r\n","import SvgComponent from \"./svg-component\";\r\nimport Position from \"./position\";\r\nimport CircleDimensions from \"./circle-dimensions\";\r\n\r\nexport default class CircleSvgComponent implements SvgComponent{\r\n\r\n  constructor(public snapCtx: Snap.Paper, public position: Position, public dimensions: CircleDimensions){}\r\n  element!: Snap.Element\r\n  draw() : Promise<void> {\r\n    return new Promise<void>( (resolve: any) => {\r\n      this.element = this.snapCtx.circle(this.position.x, this.position.y, this.dimensions.radius);\r\n\r\n      // TODO: take in a given colour and calculate lighter value based on that\r\n      var colourAttribute: string = '#d9c88c';\r\n      var lighterColourAtribute: string = '#e6dab3';\r\n\r\n      this.element.attr({\r\n        fill: colourAttribute,\r\n        stroke: lighterColourAtribute,\r\n        strokeWidth: 3\r\n      });\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n","import ImageSvgComponent from \"./image-svg-component\"\r\nimport SvgComponent from \"./svg-component\";\r\nimport Position from \"./position\";\r\nimport RectangleDimensions from \"./rectangle-dimensions\";\r\nimport CircleSvgComponent from \"./circle-svg-component\";\r\nimport CircleDimensions from \"./circle-dimensions\";\r\nimport MapPinCardSvgComponent from \"./map-pin-card-svg-component\";\r\nimport MapPinDetails from \"./map-pin-details\";\r\n\r\nexport default class MapPinSvgComponent implements SvgComponent {\r\n\r\n  constructor(private name:string, private description: string, private imageSource: string, public snapCtx: Snap.Paper, public position: Position, public dimensions: RectangleDimensions, private clickCallback: (parameter : any) => void){}\r\n\r\n  draw() {\r\n    return new Promise<void>( (resolve: ()=> any, reject: ()=> any) => {\r\n      let pinImage: ImageSvgComponent = new ImageSvgComponent(this.imageSource, this.snapCtx, this.position, this.dimensions);\r\n      let circleSize = this.dimensions.width * 0.10;\r\n      let circleX: number = this.position.x + this.dimensions.width/2;\r\n      let circleY: number = this.position.y + (this.dimensions.height * 1.10) + circleSize;\r\n      let circlePosition: Position = { x: circleX, y: circleY};\r\n      let circleForPin : CircleSvgComponent = new CircleSvgComponent(this.snapCtx, circlePosition, new CircleDimensions(circleSize));\r\n      let mapPinDetails: MapPinDetails = {title: this.name, description: this.description };\r\n      let mapPinCardDimensions = new RectangleDimensions(this.dimensions.width * 3, this.dimensions.height * 1.5);\r\n      let nameCard: MapPinCardSvgComponent = new MapPinCardSvgComponent(mapPinDetails, this.snapCtx, circlePosition, mapPinCardDimensions);\r\n      pinImage.draw().then( () => {\r\n        circleForPin.draw();\r\n        nameCard.draw();\r\n        circleForPin.element.hover(hoverInHandler => {\r\n          nameCard.show();\r\n        }, hoverOutHandler => {\r\n          nameCard.hide();\r\n        });\r\n        circleForPin.element.click(() => {\r\n          this.clickCallback(this.name);\r\n        });\r\n      });\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n","import MapPinSvgComponent from \"./map-pin-svg-component\";\r\nimport ImageSvgComponent from \"./image-svg-component\";\r\nimport TextSvgComponent from \"./text-svg-component\";\r\nimport SvgComponent from \"./svg-component\";\r\nimport Position from \"./position\";\r\nimport Dimensions from \"./dimensions\";\r\nimport Utils from \"./utils\";\r\nimport RectangleDimensions from \"./rectangle-dimensions\";\r\n\r\nexport default class MapSvgComponent implements SvgComponent {\r\n\r\n  constructor(private title: string, private imageSource: string, private pins: Array<any>, public snapCtx: Snap.Paper, public position: Position, public dimensions: RectangleDimensions){}\r\n\r\n  draw() : Promise<void> {\r\n    return new Promise<void>( (resolve: ()=> any, reject: ()=> any) => {\r\n      let mapImage: ImageSvgComponent = new ImageSvgComponent(this.imageSource, this.snapCtx, this.position, this.dimensions);\r\n      let titleFontSize: number = this.dimensions.height * 0.075;\r\n      let titleX: number = this.position.x - this.dimensions.width/2;\r\n      let titleY: number = this.position.y + (this.dimensions.height * 0.075);\r\n      let titlePosition: Position = { x: titleX, y: titleY};\r\n      let mapTitle: TextSvgComponent = new TextSvgComponent(this.title, this.snapCtx, titlePosition, this.dimensions, titleFontSize);\r\n      mapImage.draw().then( () => {\r\n        for(let pin of this.pins){\r\n          let pinSize: number = this.dimensions.width * 0.075;\r\n          let pinDimensions: RectangleDimensions = new RectangleDimensions(pinSize, pinSize);\r\n          let mapPin = new MapPinSvgComponent(pin.name, pin.description, pin.imageSource, this.snapCtx, pin.position, pinDimensions, pin.callbackFunction);\r\n          mapPin.draw();\r\n        }\r\n        mapTitle.draw();\r\n      });\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n","import MapSvgComponent from \"./map-svg-component\";\r\nimport Position from \"./position\";\r\nimport RectangleDimensions from \"./rectangle-dimensions\";\r\n\r\nimport Snap = require(\"snapsvg\");\r\n\r\nexport function createMap (svgId: string, map: any)  {\r\n  let snapCtx : Snap.Paper = Snap('#' + svgId);\r\n  let svgElement : SVGSVGElement | any = document.getElementById(svgId);\r\n  let mapWidth: number = svgElement.width.baseVal.valueInSpecifiedUnits\r\n  let mapHeight: number = svgElement.height.baseVal.valueInSpecifiedUnits\r\n  let mapDimensions = new RectangleDimensions(mapWidth, mapHeight);\r\n  let mapPosition: Position = { x: 0, y: 0 };\r\n  let canvasMap: MapSvgComponent = new MapSvgComponent(map.title, map.imageSource, map.pins, snapCtx, mapPosition, mapDimensions);\r\n  canvasMap.draw().then( () => {\r\n    console.log(\"finito!\");\r\n  });\r\n}\r\n"],"sourceRoot":""}