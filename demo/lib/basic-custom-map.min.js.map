{"version":3,"sources":["webpack://basicCustomMap/webpack/universalModuleDefinition","webpack://basicCustomMap/webpack/bootstrap","webpack://basicCustomMap/./src/utils.ts","webpack://basicCustomMap/./src/image-svg-component.ts","webpack://basicCustomMap/./node_modules/snapsvg/dist/snap.svg.js","webpack://basicCustomMap/./src/map-pin-card-svg-component.ts","webpack://basicCustomMap/./src/circle-svg-component.ts","webpack://basicCustomMap/./src/map-pin-svg-component.ts","webpack://basicCustomMap/./src/map-svg-component.ts","webpack://basicCustomMap/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","setColourAttributeForSnapElement","snapElement","colourAttributes","attr","fill","fillColour","stroke","strokeColour","strokeWidth","strokeSize","ImageSvgComponent","[object Object]","imageSource","snapCtx","position","dimensions","this","Promise","resolve","reject","image","x","y","width","height","__WEBPACK_AMD_DEFINE_RESULT__","glob","current_event","stop","has","separator","comaseparator","numsort","a","b","events","firstDefined","ii","length","lastDefined","objtos","toString","Str","String","isArray","Array","ar","eve","scope","oldstop","args","slice","arguments","listeners","z","indexed","queue","out","ce","push","zIndex","sort","apply","_events","item","items","k","j","jj","nes","names","split","e","es","concat","f","sep","replace","RegExp","on","exist","event","attrs","nt","subname","cur","join","test","nts","off","unbind","key","splice","inodes","unshift","funcs","prune","once","f2","version","__WEBPACK_LOCAL_MODULE_0__","undefined","mina","requestID","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","Date","getTime","idgen","idprefix","timer","now","sta","val","ds","dur","B","speed","spd","duration","stopit","id","update","pause","pdif","resume","frame","res","start","end","easing","set","timeStamp","len","A","anim","linear","status","time","getById","easeout","Math","pow","easein","easeinout","q","Q","sqrt","X","abs","Y","t","backin","backout","elastic","sin","PI","bounce","Snap","w","h","nodeType","wrap","is","Element","doc","querySelector","Paper","_","win","document","toFloat","parseFloat","toInt","parseInt","math","mmax","max","mmin","min","E","round","objectToString","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","ID","el","type","xlink","xmlns","hub","url","$","createTextNode","text","createComment","substring","getAttributeNS","getAttribute","nodeValue","setAttributeNS","setAttribute","removeAttribute","createElementNS","toLowerCase","isFinite","cacher","postprocessor","newf","arg","cache","count","array","repush","shift","rad","deg","format","tokenRegex","objNotationRegex","str","obj","all","quote","quotedName","isFunc","replacer","clone","constructor","angle","tan","cos","asin","num","acos","atan","atan2","x1","y1","x2","y2","x3","y3","len2","closestPoint","path","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","node","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","indexOf","g","hex","error","rgbtoString","charAt","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","getElementsByTagName","style","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","V","L","M","parsePathString","pathString","pth","arr","paramCounts","u","data","params","parseTransformString","TString","svgTransform2string","tstr","rgTransform","transform2matrix","bbox","tdata","Matrix","bb","tlen","command","absolute","inver","invert","translate","rotate","scale","add","_unit2px","svg","getSomeSVG","mgr","class","appendChild","getW","getBBox","getH","nam","removeChild","contains","compareDocumentPosition","ownerSVGElement","select","add2group","list","forEach","children","childNodes","snap","paper","tagName","nodeName","anims","transform","mask","pattern","symbol","method","Fragment","frag","make","parent","desc","defs","proto","ownerDocument","body","dom","contentDocument","getSomeDefs","parentNode","pdefs","query","selectAll","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","div","createElement","innerHTML","firstChild","fragment","ch","toJSON","jsonFiller","css","lastIndexOf","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","pd","encodeURIComponent","open","setRequestHeader","onreadystatechange","readyState","send","load","responseText","getElementByPoint","canvas","target","elementFromPoint","opera","so","elem","box","getBoundingClientRect","docElem","documentElement","clientTop","clientLeft","top","pageYOffset","scrollTop","left","pageXOffset","scrollLeft","getOffset","sr","createSVGRect","hits","getIntersectionList","plugin","elproto","unit2px","isWithoutTransform","getClientRects","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","matrix","map","propString","extractTransform","doReturn","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","it","appendTo","prepend","first","insertBefore","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","cloneNode","els","ids","uses","urltest","linktest","oldid","old","fs","fixids","toDefs","toPattern","patternUnits","viewBox","refX","refY","cx","cy","markerWidth","markerHeight","orient","eldata","chld","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","from","to","Animation","animation","inAnim","_attrs","_callback","curStatus","animate","setter","eq","fkeys","tkeys","keys","equal","matrixproto","norm","normalize","mag","aNew","bNew","multLeft","cNew","eNew","me","skewX","skew","skewY","fromCharCode","offset","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","reURLValue","URL","fillStroke","grad","gradient","deurl","clipIt","gradrg","setFontSize","fontSize","getFontSize","tokens","stops","seed","step","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","textExtract","chi","textContent","internal","rgNotSpace","addClass","clazz","finalValue","classes","curClasses","removeClass","pos","hasClass","toggleClass","flag","operators","+","-","/","*","reUnit","reAddon","getNumber","plus","evnt","atr","unit","aUnit","op","isNaN","bplus","getUnit","rect","circle","preload","onerror","src","img","cssText","onload","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","inserted","GgetBBox","GsetStops","addStop","gradientLinear","setStops","gradientRadial","fx","fy","gradientUnits","clear","next","p2s","paths","ps","sleep","r1","r2","r0","rectPath","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","x4","y4","ll","t2","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","point","sp","subpaths","path2curve","getSubpathsAtLength","t1","t13","t12","t3","mx","my","nx","ny","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","interPathHelper","path1","path2","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","pathBBox","dim","xmin","ymin","ellipsePath","getPath","pathToAbsolute","pa0","pa","crz","dots","pop","catmullRom2bezier","l2c","q2c","ax","ay","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","crp","iLen","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","lowerCase","rel","toCubic","pathi","Set","bindings","setproto","thisArg","each","begin","handler","cb","callbacker","bind","aname","unbound","index","insertion","tail","todel","arglen","exclude","getEmpty","getViewBox","getColour","Function","path2array","isNumeric","Number","tt1","tt2","maxlength","equaliseTransform","bUnit","arr1","arr2","arrayEqual","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","origTransform","init","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align","saveColor","colors","A100","A200","A400","A700","mui","flat","pink","purple","deeppurple","indigo","lightblue","cyan","teal","lightgreen","lime","yellow","amber","orange","deeporange","brown","grey","bluegrey","turquoise","greensea","sunflower","emerland","nephritis","carrot","pumpkin","peterriver","belizehole","alizarin","pomegranate","amethyst","wisteria","clouds","silver","wetasphalt","midnightblue","concrete","asbestos","importMUIColors","utils_1","MapPinCardSvgComponent","details","container","getContainerForCard","parsedSvg","getForeignObjectForCard","groupedElement","hide","objectDimensions","getDimensionsForForeignObject","foreignObjectHtml","getForeignObjectHtmlForCard","title","description","makeElementVisible","visible","attributeValue","CircleSvgComponent","radius","circle_svg_component_1","image_svg_component_1","map_pin_card_svg_component_1","MapPinSvgComponent","mapPin","pinImage","circleForPin","getCircleComponentForPin","nameCard","getMapPinCardComponent","draw","then","addBehaviourToShowMapPinCardOnCircleHover","addBehaviourToExecuteCallbackOnCircleClick","circleDimensions","getCircleDimensions","circlePosition","getCirclePosition","pinDimensions","getCircleRadius","pinPosition","circleRadius","mapPinDetails","mapPinCardDimensions","getMapPinCardDimensions","mapPinCirclePosition","pinCircle","pinCard","hoverInHandler","show","hoverOutHandler","click","callbackFunction","map_pin_svg_component_1","MapSvgComponent","xScale","coordinateSpace","yScale","drawMapPins","pins","mapPins","pin","scaledPinPositon","getScaledPosition","scaledDimensions","getScaledDimensions","map_svg_component_1","createMap","svgId","mapDimensions","svgElementId","svgElement","mapWidth","valueInSpecifiedUnits","mapHeight","getSvgDimensions"],"mappings":"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","file":"basic-custom-map.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"basicCustomMap\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"basicCustomMap\"] = factory();\n\telse\n\t\troot[\"basicCustomMap\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction setColourAttributeForSnapElement(snapElement, colourAttributes) {\r\n    snapElement.attr({\r\n        fill: colourAttributes.fillColour,\r\n        stroke: colourAttributes.strokeColour,\r\n        strokeWidth: colourAttributes.strokeSize,\r\n    });\r\n}\r\nexports.setColourAttributeForSnapElement = setColourAttributeForSnapElement;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ImageSvgComponent {\r\n    constructor(imageSource, snapCtx, position, dimensions) {\r\n        this.imageSource = imageSource;\r\n        this.snapCtx = snapCtx;\r\n        this.position = position;\r\n        this.dimensions = dimensions;\r\n    }\r\n    draw() {\r\n        return new Promise((resolve, reject) => {\r\n            this.snapCtx.image(this.imageSource, this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\r\n            resolve();\r\n        });\r\n    }\r\n}\r\nexports.ImageSvgComponent = ImageSvgComponent;\r\n","/*** IMPORTS FROM imports-loader ***/\n(function() {\nvar fix = module.exports=0;\n\n// Snap.svg 0.5.0\n//\n// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// build: 2017-02-06\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.0\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        };\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != \"undefined\") {\n        // Next for Node.js or CommonJS\n        var eve = require(\"eve\");\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            // try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            // } catch (e) {\n                // return null;\n            // }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan;\n            bestLength = scanLength;\n            bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after;\n            bestLength = afterLength;\n            bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + +r, y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nreturn Snap;\n}));\n}.call(window));","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Snap = require(\"snapsvg\");\r\nconst utils_1 = require(\"./utils\");\r\nclass MapPinCardSvgComponent {\r\n    constructor(details, snapCtx, position, dimensions) {\r\n        this.details = details;\r\n        this.snapCtx = snapCtx;\r\n        this.position = position;\r\n        this.dimensions = dimensions;\r\n    }\r\n    draw() {\r\n        return new Promise((resolve, reject) => {\r\n            const container = this.getContainerForCard();\r\n            const parsedSvg = this.getForeignObjectForCard();\r\n            this.groupedElement = this.snapCtx.group(container, parsedSvg);\r\n            this.hide();\r\n            resolve();\r\n        });\r\n    }\r\n    getContainerForCard() {\r\n        const container = this.snapCtx.rect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height, 10);\r\n        const containerColourAttributes = {\r\n            fillColour: 'white',\r\n            strokeColour: 'black',\r\n            strokeSize: 1,\r\n        };\r\n        utils_1.setColourAttributeForSnapElement(container, containerColourAttributes);\r\n        return container;\r\n    }\r\n    getForeignObjectForCard() {\r\n        const objectDimensions = this.getDimensionsForForeignObject();\r\n        const foreignObjectHtml = this.getForeignObjectHtmlForCard(this.details, objectDimensions, this.position);\r\n        return Snap.parse(foreignObjectHtml);\r\n    }\r\n    getDimensionsForForeignObject() {\r\n        const cardWidth = this.dimensions.width * 0.95;\r\n        const cardHeight = this.dimensions.height * 0.95;\r\n        return { width: cardWidth, height: cardHeight };\r\n    }\r\n    getForeignObjectHtmlForCard(details, dimensions, position) {\r\n        return `\r\n    <svg>\r\n      <foreignObject width=\"${dimensions.width}\" height=\"${dimensions.height}\" x=\"${position.x}\" y=\"${position.y}\">\r\n        <p>\r\n          <b>${details.title}</b>\r\n          <br/>\r\n            ${details.description}\r\n        </p>\r\n      </foreignObject>\r\n    </svg>`;\r\n    }\r\n    hide() {\r\n        this.makeElementVisible(false);\r\n    }\r\n    show() {\r\n        this.makeElementVisible(true);\r\n    }\r\n    makeElementVisible(visible) {\r\n        const attributeValue = visible ? 'visible' : 'hidden';\r\n        this.groupedElement.attr({\r\n            visibility: attributeValue,\r\n        });\r\n    }\r\n}\r\nexports.MapPinCardSvgComponent = MapPinCardSvgComponent;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"./utils\");\r\nclass CircleSvgComponent {\r\n    constructor(snapCtx, position, dimensions) {\r\n        this.snapCtx = snapCtx;\r\n        this.position = position;\r\n        this.dimensions = dimensions;\r\n    }\r\n    draw() {\r\n        return new Promise((resolve) => {\r\n            this.element = this.snapCtx.circle(this.position.x, this.position.y, this.dimensions.radius);\r\n            // TODO: take in a given colour and calculate lighter value based on that\r\n            const circleColourAttributes = {\r\n                fillColour: '#d9c88c',\r\n                strokeColour: '#e6dab3',\r\n                strokeSize: 3,\r\n            };\r\n            utils_1.setColourAttributeForSnapElement(this.element, circleColourAttributes);\r\n            resolve();\r\n        });\r\n    }\r\n}\r\nexports.CircleSvgComponent = CircleSvgComponent;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst circle_svg_component_1 = require(\"./circle-svg-component\");\r\nconst image_svg_component_1 = require(\"./image-svg-component\");\r\nconst map_pin_card_svg_component_1 = require(\"./map-pin-card-svg-component\");\r\nclass MapPinSvgComponent {\r\n    constructor(mapPin, snapCtx, position, dimensions) {\r\n        this.mapPin = mapPin;\r\n        this.snapCtx = snapCtx;\r\n        this.position = position;\r\n        this.dimensions = dimensions;\r\n    }\r\n    draw() {\r\n        return new Promise((resolve, reject) => {\r\n            const pinImage = new image_svg_component_1.ImageSvgComponent(this.mapPin.imageSource, this.snapCtx, this.position, this.dimensions);\r\n            const circleForPin = this.getCircleComponentForPin();\r\n            const nameCard = this.getMapPinCardComponent();\r\n            pinImage.draw().then(() => {\r\n                circleForPin.draw();\r\n                nameCard.draw();\r\n                this.addBehaviourToShowMapPinCardOnCircleHover(circleForPin, nameCard);\r\n                this.addBehaviourToExecuteCallbackOnCircleClick(circleForPin);\r\n            });\r\n            resolve();\r\n        });\r\n    }\r\n    getCircleComponentForPin() {\r\n        const circleDimensions = this.getCircleDimensions(this.dimensions);\r\n        const circlePosition = this.getCirclePosition(this.dimensions, this.position);\r\n        return new circle_svg_component_1.CircleSvgComponent(this.snapCtx, circlePosition, circleDimensions);\r\n    }\r\n    getCircleDimensions(pinDimensions) {\r\n        const circleRadius = this.getCircleRadius(pinDimensions);\r\n        return { radius: circleRadius };\r\n    }\r\n    getCircleRadius(pinDimensions) {\r\n        return pinDimensions.width * 0.10;\r\n    }\r\n    getCirclePosition(pinDimensions, pinPosition) {\r\n        const circleRadius = this.getCircleRadius(pinDimensions);\r\n        const circleX = pinPosition.x + pinDimensions.width / 2;\r\n        const circleY = this.position.y + (this.dimensions.height * 1.10) + circleRadius;\r\n        return { x: circleX, y: circleY };\r\n    }\r\n    getMapPinCardComponent() {\r\n        const mapPinDetails = { title: this.mapPin.name, description: this.mapPin.description };\r\n        const mapPinCardDimensions = this.getMapPinCardDimensions(this.dimensions);\r\n        const mapPinCirclePosition = this.getCirclePosition(this.dimensions, this.position);\r\n        return new map_pin_card_svg_component_1.MapPinCardSvgComponent(mapPinDetails, this.snapCtx, mapPinCirclePosition, mapPinCardDimensions);\r\n    }\r\n    getMapPinCardDimensions(pinDimensions) {\r\n        const mapPinCardWidth = pinDimensions.width * 3;\r\n        const mapPinCardHeight = pinDimensions.height * 1.5;\r\n        return { width: mapPinCardWidth, height: mapPinCardHeight };\r\n    }\r\n    addBehaviourToShowMapPinCardOnCircleHover(pinCircle, pinCard) {\r\n        pinCircle.element.hover((hoverInHandler) => {\r\n            pinCard.show();\r\n        }, (hoverOutHandler) => {\r\n            pinCard.hide();\r\n        });\r\n    }\r\n    addBehaviourToExecuteCallbackOnCircleClick(pinCircle) {\r\n        pinCircle.element.click(() => {\r\n            this.mapPin.callbackFunction(this.mapPin);\r\n        });\r\n    }\r\n}\r\nexports.MapPinSvgComponent = MapPinSvgComponent;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst image_svg_component_1 = require(\"./image-svg-component\");\r\nconst map_pin_svg_component_1 = require(\"./map-pin-svg-component\");\r\nclass MapSvgComponent {\r\n    constructor(map, snapCtx, position, dimensions) {\r\n        this.map = map;\r\n        this.snapCtx = snapCtx;\r\n        this.position = position;\r\n        this.dimensions = dimensions;\r\n        this.xScale = this.dimensions.width / this.map.coordinateSpace.width;\r\n        this.yScale = this.dimensions.height / this.map.coordinateSpace.height;\r\n    }\r\n    draw() {\r\n        return new Promise((resolve, reject) => {\r\n            const mapImage = new image_svg_component_1.ImageSvgComponent(this.map.imageSource, this.snapCtx, this.position, this.dimensions);\r\n            mapImage.draw().then(() => {\r\n                this.drawMapPins(this.map.pins);\r\n            });\r\n            resolve();\r\n        });\r\n    }\r\n    drawMapPins(mapPins) {\r\n        for (const pin of mapPins) {\r\n            const scaledPinPositon = this.getScaledPosition(pin.position);\r\n            const scaledDimensions = this.getScaledDimensions(pin.dimensions);\r\n            const mapPin = new map_pin_svg_component_1.MapPinSvgComponent(pin, this.snapCtx, scaledPinPositon, scaledDimensions);\r\n            mapPin.draw();\r\n        }\r\n    }\r\n    getScaledPosition(position) {\r\n        const scaledX = position.x * this.xScale;\r\n        const scaledY = position.y * this.yScale;\r\n        return { x: scaledX, y: scaledY };\r\n    }\r\n    getScaledDimensions(dimensions) {\r\n        const scaledWidth = dimensions.width * this.xScale;\r\n        const scaledHeight = dimensions.height * this.yScale;\r\n        return { width: scaledWidth, height: scaledHeight };\r\n    }\r\n}\r\nexports.MapSvgComponent = MapSvgComponent;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Snap = require(\"snapsvg\");\r\nconst map_svg_component_1 = require(\"./map-svg-component\");\r\nfunction createMap(svgId, map) {\r\n    const snapCtx = Snap('#' + svgId);\r\n    const mapDimensions = getSvgDimensions(svgId);\r\n    const mapPosition = { x: 0, y: 0 };\r\n    const canvasMap = new map_svg_component_1.MapSvgComponent(map, snapCtx, mapPosition, mapDimensions);\r\n    canvasMap.draw();\r\n}\r\nexports.createMap = createMap;\r\nfunction getSvgDimensions(svgElementId) {\r\n    const svgElement = document.getElementById(svgElementId);\r\n    const mapWidth = svgElement.width.baseVal.valueInSpecifiedUnits;\r\n    const mapHeight = svgElement.height.baseVal.valueInSpecifiedUnits;\r\n    return { width: mapWidth, height: mapHeight };\r\n}\r\n"],"sourceRoot":""}